{"title":"构建利器 Webpack","createAt":"2019-05-07T21:13:48.000Z","updateAt":"2019-05-07T21:13:48.000Z","tags":null,"category":null,"author":null,"content":"## 简介\n\nwebpack 是一个 JavaScript 程序的静态模块打包器。\n\n其工作原理是：webpack 以递归方式构建一个关系依赖图，囊括 JavaScript 程序需要的各个模块，然后将这些模块打包成一个或多个依赖包(bundle)。\n\n<!-- more -->\n\n## 配置矩阵\n\nwebpack 配置的组成矩阵：入口 entry，输出 output，加载器 loader，插件 plugin。\n\n## 入口\n\n用法:\n\n```js\n// 简写语法\nentry: string | string[]\n// 对象语法\nentry: {\n  [entryChunkName: string]: string | string[]\n}\n```\n\n## 输出\n\n用法：\n\n```js\n// 简写语法\noutput: {\n  filename:  string,\n  path: string,\n  publicPath: string\n}\n\n// 示例\n{\n  entry: {\n    app: './src/app.js',\n    search: './src/search.js'\n  },\n  output: {\n    filename: '[name].js',\n    path: __dirname + '/dist'\n  }\n}\n\n// 写入到硬盘：./dist/app.js, ./dist/search.js\n```\n\n## 模式(补充)\n\n配置模式 mode，告知 webpack 使用相应模式的内置优化。\n\n```js\n// 用法\n{\n  mode: \"development\" | \"production\";\n}\n\n// 示例\nmodule.exports = {\n  mode: \"development\"\n};\n// development 等效于\nmodule.exports = {\n  plugins: [\n    new webpack.NamedModulesPlugin(),\n    new webpack.DefinePlugin({\n      \"process.env.NODE_ENV\": JSON.stringify(\"development\")\n    })\n  ]\n};\nmodule.exports = {\n  mode: \"production\"\n};\n// production 等效于\nmodule.exports = {\n  plugins: [\n    new UglifyJsPlugin(/* ... */),\n    new webpack.DefinePlugin({\n      \"process.env.NODE_ENV\": JSON.stringify(\"production\")\n    }),\n    new webpack.optimize.ModuleConcatenationPlugin(),\n    new webpack.NoEmitOnErrorsPlugin()\n  ]\n};\n```\n\n## 加载器\n\n加载器，允许你在加载文件时对文件进行预处理。\n整体配置如下：\n1、安装依赖包，如 ts-loader\n\n```bash\nnpm install --save-dev ts-loader\n```\n\n2、在配置文件 webpack.config.js 上，添加内容\n\n```js\n{\n  module: {\n    rules: [{ test: /\\.ts$/, use: \"ts-loader\" }];\n  }\n}\n```\n\n## 插件\n\n插件是 webpack 的核心功能。其本质是一个 JavaScript 对象，内置一个 apply 方法，通过此方法可访问 webpack 的 compiler 对象。\n\n示例：\n\n```js\nconst pluginName = \"ConsoleLogOnBuildWebpackPlugin\";\n\nclass ConsoleLogOnBuildWebpackPlugin {\n  apply(compiler) {\n    compiler.hooks.run.tap(pluginName, compilation => {\n      console.log(\"webpack 构建过程开始！\");\n    });\n  }\n}\n```\n\n整体配置如下：\n1、安装依赖包\n\n```bash\nnpm install --save-dev html-webpack-plugin\n```\n\n2、在配置文件 babel.config.js 上，添加内容\n\n```js\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\n\nconst config = {\n  plugins: [new HtmlWebpackPlugin({ template: \"./src/index.html\" })]\n};\n\nmodule.exports = config;\n```\n\n## web 服务器\n\nwebpack 提供一个简单的 web 服务器 webpack-dev-server，让我们在开发时启动 web 服务。\n\n整体配置如下：\n\n1、安装依赖包\n\n```bash\nnpm i --save-dev webpack-dev-server webpack-merge\n```\n\n2、在配置文件 package.json 上，添加内容\n\n```json\n{\n  \"scripts\": {\n    \"dev\": \"webpack-dev-server --open --config webpack.config.js\"\n  }\n}\n```\n\n3、在配置文件 webpack.config.js 上，添加内容\n\n```js\n{\n  // 使用 source map\n  devtool:'inline-source-map',\n  // 服务器参数\n  devServer:{\n    contentBase:\"./dist\"\n  }\n}\n```\n\n## 实践\n\n1、安装依赖包\n\n```bash\nnpm install --save-dev webpack webpack-cli webpack-merge\n```\n\n2、配置启动命令\n在配置文件 package.json 上，添加内容\n\n```js\n{\n  \"scripts\":{\n    \"start\":\"webpack --config webpack.config.js\"\n  }\n}\n```\n\n3、添加解析规则\n在配置文件 webpack.config.js 上，添加内容\n\n```js\n{\n  \"resolve\": {\n    extensions:['.js','.ts','.tsx'],\n    alias:{\n      \"@\": path.resolve(__dirname, 'src/'),\n      utils: path.resolve(__dirname,'src/utils/')\n    }\n  }\n}\n```\n\n## 常用加载器(附录)\n\n1、加载 css\n\n```js\n// 安装依赖包\nnpm install --save-dev style-loader css-loader\n\n// 在配置文件 webpack.config.js 上，添加内容\n{\n  test:/\\.css$/,\n  use:[\n    'style-loader',\n    'css-loader'\n  ]\n}\n```\n\n2、加载 less\n\n```js\n// 安装依赖包\nnpm install --save-dev less-loader less\n\n// 在配置文件 webpack.config.js 上，添加内容\n{\n  test:/\\.less$/,\n  use: [\n    {\n      loader: \"style-loader\"\n    },\n    {\n      loader: \"css-loader\"\n    },\n    {\n      loader: \"less-loader\"\n    }\n  ]\n}\n```\n\n3、加载图片\n\n```js\n// 安装依赖包\nnpm install --save-dev file-loader\n\n// 在配置文件 webpack.config.js 上，添加内容\n{\n  test: /\\.(png|svg|jpg|gif)$/,\n  use:'file-loader'\n}\n\n```\n\n4、加载 ts\n\n```js\n// 安装依赖包\nnpm install --save-dev ts-loader\n\n// 在配置文件 webpack.config.js 上，添加内容\n{\n  test: /\\.tsx?$/,\n  use:'ts-loader'\n}\n```\n\n5、加载 ts\n\n```js\n// 安装依赖包\nnpm install --save-dev awesome-typescript-loader\n\n\n// 在配置文件 webpack.config.js 上，添加内容\n{\n  test: /\\.tsx?$/,\n  use:'awesome-typescript-loader'\n},\n{\n  enforce:\"pre\",\n  test:/\\.js$/,\n  loader:\"source-map-loader\"\n}\n```\n\n6、加载 json\n\n```js\n// 安装依赖包\nnpm install --save-dev json-loader\n\n\n// 在配置文件 webpack.config.js 上，添加内容\n{\n  test: /\\.json$/,\n  use:'json-loader'\n}\n```\n\n7、加载 html\n\n```js\n// 安装依赖包\nnpm install --save-dev html-loader\n\n// 在配置文件 webpack.config.js 上，添加内容\n\n{\n  test: /\\.html$/,\n  use: [\n    {\n      loader: \"html-loader\",\n      options: {\n        minimize: true\n      }\n    }\n  ]\n}\n```\n\n## 常见插件(附录)\n\n1、html-webpack-plugin\n\n```js\n// 安装依赖包\nnpm install --save-dev html-webpack-plugin\n\n// 在配置文件 webpack.config.js 上，添加内容\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nconst config = {\n  plugins:[\n    new HtmlWebpackPlugin({\n      filename: \"index.html\",\n      template: \"./src/index.html\",\n      inject: true\n      })\n  ]\n}\n```\n\n2、clean-webpack-plugin\n\n```js\n// 安装依赖包\nnpm install --save-dev clean-webpack-plugin\n\n// 在配置文件 webpack.config.js 上，添加内容\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\n\nconst config = {\n  plugins:[\n    new CleanWebpackPlugin(['dist'])\n  ]\n}\n\n```\n\n3、uglifyjs-webpack-plugin\n\n```js\n// 安装依赖包\nnpm install --save-dev uglifyjs-webpack-plugin\n\n// 在配置文件 webpack.config.js 上，添加内容\nconst UglifyJSPlugin = require(\"uglifyjs-webpack-plugin\");\n\nconst config = {\n  plugins:[\n        new UglifyJSPlugin({\n      uglifyOptions: {\n        compress: {\n          drop_console: true\n        }\n      },\n      sourceMap: true\n    }),\n  ]\n}\n```\n\n4、copy-webpack-plugin\n\n```js\n// 安装依赖包\nnpm install --save-dev copy-webpack-plugin\n\n// 在配置文件 webpack.config.js 上，添加内容\nconst CopyWebpackPlugin = require(\"copy-webpack-plugin\");\n\nconst config = {\n    plugins: [\n    new CopyWebpackPlugin([{ from: \"src/images\", to: \"images\" }])\n  ]\n}\n```\n\n5、webpack-bundle-analyzer\n\n```js\n// 安装依赖包\nnpm install --save-dev webpack-bundle-analyzer\n\n// 在配置文件 webpack.config.js 上，添加内容\nconst BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;\n\n\nconst config = {\n    plugins: [\n    new BundleAnalyzerPlugin()\n  ]\n}\n```\n\n(完)","preview":"## 简介\n\nwebpack 是一个 JavaScript 程序的静态模块打包器。\n\n其工作原理是：webpack 以递归方式构建一个关系依赖图，囊括 JavaScript 程序需要的各个模块，然后将这些模块打包成一个或多个依赖包(bundle)。\n\n"}